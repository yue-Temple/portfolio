package DTO;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

/**
 * 注文 モデルクラス.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
public class Order implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** 注文ID. */
	private Integer id;

	/** スタッフ. */
	private Staff staff;

	/** 注文日時. */
	private Timestamp orderTime;

	/** 備考. */
	private String note;

	/** 注文詳細 一覧. */
	private List<OrderDetail> orderDetailList;

	/**
	 * コンストラクタ.
	 */
	public Order() {
		this.orderDetailList = new ArrayList<OrderDetail>();
	}

	/**
	 * 注文ID を設定します.
	 * 
	 * @param id
	 *            注文ID
	 */
	public void setId(Integer id) {
		this.id = id;
	}

	/**
	 * 注文ID を取得します.
	 * 
	 * @return 注文ID
	 */
	public Integer getId() {
		return this.id;
	}

	/**
	 * スタッフ を設定します.
	 * 
	 * @param staff
	 *            スタッフ
	 */
	public void setStaff(Staff staff) {
		this.staff = staff;
	}

	/**
	 * スタッフ を取得します.
	 * 
	 * @return スタッフ
	 */
	public Staff getStaff() {
		return this.staff;
	}

	/**
	 * 注文日時 を設定します.
	 * 
	 * @param orderTime
	 *            注文日時
	 */
	public void setOrderTime(Timestamp orderTime) {
		this.orderTime = orderTime;
	}

	/**
	 * 注文日時 を取得します.
	 * 
	 * @return 注文日時
	 */
	public Timestamp getOrderTime() {
		return this.orderTime;
	}

	/**
	 * 備考 を設定します.
	 * 
	 * @param note
	 *            備考
	 */
	public void setNote(String note) {
		this.note = note;
	}

	/**
	 * 備考 を取得します.
	 * 
	 * @return 備考
	 */
	public String getNote() {
		return this.note;
	}

	/**
	 * 注文詳細 一覧を設定します.
	 * 
	 * @param orderDetailSet
	 *            注文詳細 一覧
	 */
	public void setOrderDetailList(List<OrderDetail> orderDetailList) {
		this.orderDetailList = orderDetailList;
	}

	/**
	 * 注文詳細 を追加します.
	 * 
	 * @param orderDetail
	 *            注文詳細
	 */
	public void addOrderDetail(OrderDetail orderDetail) {
		this.orderDetailList.add(orderDetail);
	}

	/**
	 * 注文詳細 一覧を取得します.
	 * 
	 * @return 注文詳細 一覧
	 */
	public List<OrderDetail> getOrderDetailList() {
		return this.orderDetailList;
	}

	/**
	 * この注文の合計金額を取得する。
	 * @return この注文の合計金額
	 
	public int getTotal() {
		int total = 0;
		for (OrderDetail orderDetail : orderDetailList) {
			total += orderDetail.getTotal();
		}
		return total;
	}
	*/
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Order other = (Order) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		return String.format("Order [id=%s, staff=%s, orderTime=%s, note=%s, orderDetailSet=%s]", id, staff, orderTime,
				note, orderDetailList);
	}

	
}
